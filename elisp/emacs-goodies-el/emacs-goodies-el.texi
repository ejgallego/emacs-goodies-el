@c -*- mode: texinfo -*-
\input texinfo

@c $Id: emacs-goodies-el.texi,v 1.14 2003/06/20 01:23:22 psg Exp $
@c %**start of header
@setfilename info/emacs-goodies-el
@settitle Emacs-Goodies-el
@c %**end of header

@dircategory Emacs
@direntry
* Emacs-Goodies-el: (emacs-goodies-el). Miscellaneous add-ons for Emacs
@end direntry

@c Version variables.
@set EDITION 1.0
@set UPDATED 8 May 2003

@ifinfo
This is Edition @value{EDITION}, last updated @value{UPDATED}, of
@cite{Emacs-Goodies-el}.
@end ifinfo

@titlepage
@title Emacs-Goodies-el: Miscellaneous add-ons for Emacs
@subtitle A manual for what's in this package.
@author Peter S. Galbraith
@end titlepage

@node Top, align-string, (dir), (dir)
@top The Emacs-Goodies-el Package Setup

This manual describes the Emacs-Goodies-el package and its setup.  A
quick descriptions of elisp files contained in this package can be found
in the file @file{/usr/share/doc/emacs-goodies-el/README.Debian.gz}.

All packaged files are installed, setup and ready to use if they don't
override standard Emacs commands, modes, or settings.

Some extra package installation and setup is done if you customize the
variable @code{emacs-goodies-el-defaults} to t (its aggressive state).
These will override standard Emacs defaults.  The affected package is
currently only: @ref{ff-paths}.  Packages which require activation in
order to function include: @ref{bar-cursor}, @ref{diminish} and @ref{df}.

To customize setup of these aggressive packages on a finer-grain basis,
do:
@example
@kbd{M-x} customize-group @key{RET} emacs-goodies-el @key{RET}
@end example

The following files are documented so far.  This is a recently started
work-in-progress, so don't despair about the low percentage of
documented files just yet.

@menu
* align-string::           Align string components over several lines.
* all::                    Edit all lines matching a given regexp.
* apt-sources::            Mode for editing apt source.list file.  
* apt-utils::              Emacs interface to APT.
* auto-fill-mode-inhibit:: auto-fill-mode (de)activation
* bar-cursor::             Switch block cursor to a bar
* boxquote::               Quote text with a semi-box.
* browse-kill-ring::       Interactively insert items from kill-ring.
* clipper::                Save strings of data for further use.
* cyclebuffer::            Select buffer by cycling through.
* df::                     Display space left on partitions in mode-line.
* diminish::               Diminish minor-mode's display.
* dirvars::                Local variables that apply to an entire directory.
* ff-paths::               Searches certain paths to find files.
@end menu

This work compiles GPL'ed documentation from the various elisp files
in /usr/share/emacs/site-lisp/emacs-goodies-el/.  This text is also
licensed under the GPL V2 (See /usr/share/common-licenses/GPL-2) and
is edited by Peter S. Galbraith @email{psg@@debian.org}.

@node align-string, all, Top, Top
@chapter align-string - align string components over several lines.

This elisp file is not documented.  The commands are:

@itemize @bullet
@item align-string

  Align first occurrence of REGEXP in each line of region.  If given a
prefix argument, align occurrence number COUNT on each line.

@item align-all-strings

  Align all occurrences of REGEXP in each line of region.  That is to
say, align the first occurrence of each line with each other, align
the second occurence of each line with each other, and so on.
@end itemize


@node all, apt-sources, align-string, Top
@chapter all - Edit all lines matching a given regexp.

This is an implementation of the xedit @code{all} command for GNU Emacs.

It works mostly like @code{occur} except that changes to the
@code{*All*} buffer are propagated back to the original buffer.

Type @kbd{M-x all} to try it out.

@node apt-sources, apt-utils, all, Top
@chapter apt-sources - Mode for editing apt source.list file.

This mode is for editing @file{/etc/apt/sources.list}, the APT
(Advanced Package Tool) configuration file found on Debian systems.

APT is a package retrieval tool for Debian; for example you could
install Emacs with the command:

@example
  apt-get install emacs21
@end example

and APT will then retrieve the package and install it for you. The
sources.list file tells APT where to look for packages. Mine looks
like this:

@example
  deb http://http.us.debian.org/debian unstable main contrib
  deb http://non-us.debian.org/debian-non-US unstable/non-US main

  deb ftp://ftp.de.debian.org/debian ../project/experimental main
@end example

This mode font-locks the file and add some things including new
source lines and modifying existing source lines.

This mode can be customized in diferent parts. You can (interactively)
change if you want blank lines around a new source line and comment
with @code{apt-sources-around-lines}. Also you can change the way that
this mode names each source line with the variable
@code{apt-sources-source-name}; if no name is entered, no comment name
will be inserted.

You can modify existing parts of the source line; check the mode
documentation for more details. Another thing that this mode can do is
to replicate an existing line (@kbd{C-c C-r}) that will be changed to
the 'deb' or 'deb-src' corresponding line. If it replicates a 'deb'
line, an identical 'deb-src' source line will be created.

@node apt-utils, auto-fill-mode-inhibit, apt-sources, Top
@chapter apt-utils - Emacs interface to APT

Start things off using e.g.:
@example
@kbd{M-x} apt-utils-show-package @key{RET} emacs21 @key{RET}
@end example

Other packages (dependencies, conflicts etc) can be navigated using
@command{apt-utils-next-package} (@key{TAB}),
@command{apt-utils-prev-package} (@key{M-TAB}),
@command{apt-utils-choose-package-link} (@key{>}) or
@command{apt-utils-follow-link} (@key{RET}). Return to the previous
package with @command{apt-utils-view-previous-package} (@key{<}).

ChangeLog and README files for the current package can easily be
accessed with, for example, @command{apt-utils-view-changelog} (@key{C}).

For normal (i.e., not virtual) packages, the information can be toggled
between `package' and `showpkg' displays using
@command{apt-utils-toggle-package-info} (@key{t}); the latter is useful
for the "Reverse Depends".

View the key bindings with describe-mode (bound to ? by default)
or use the menu.

You may alter various settings of @code{apt-utils} using 

@example
@kbd{M-x} customize-group @key{RET} apt-utils @key{RET}
@end example

@node auto-fill-mode-inhibit, bar-cursor, apt-utils, Top
@chapter auto-fill-mode-inhibit - auto-fill-mode (de)activation

The purpose of this library is to allow the use of @command{auto-fill-mode}
using, e.g.

@example
 (add-hook 'text-mode-hook 'turn-on-auto-fill)
@end example
or, using the custom interface
@example
@kbd{M-x} customize-variable @key{RET} text-mode-hook @key{RET}
@end example
and select @command{turn-on-auto-fill} and then save the setting.

and yet disable @command{auto-fill-mode} on buffers with names that
match one of a list of regular expressions.  Customize this list
using:

@example
@kbd{M-x} customize-variable @key{RET} auto-fill-inhibit-list @key{RET}
@end example

@node bar-cursor, boxquote, auto-fill-mode-inhibit, Top
@chapter bar-cursor - switch block cursor to a bar

A simple package to convert the block cursor into a bar cursor.  In
overwrite mode, the bar cursor changes back into a block cursor.
This is a quasi-minor mode, meaning that it can be turned on & off
easily though only globally (hence the quasi-).

To enable it, customize the variable @code{bar-cursor-mode}:
@example
@kbd{M-x} customize-variable @key{RET} bar-cursor-mode @key{RET}
@end example

It is also listed when you @command{customize-group} @code{emacs-goodies-el}.

@node boxquote, browse-kill-ring, bar-cursor, Top
@chapter boxquote - Quote text with a semi-box.

boxquote provides a set of functions for using a text quoting style that
partially boxes in the left hand side of an area of text, such a marking
style might be used to show externally included text or example code.

@example
,----
| The default style looks like this.
`----
@end example

A number of functions are provided for quoting a region, a buffer, a
paragraph and a defun. There are also functions for quoting text while
pulling it in, either by inserting the contents of another file or by
yanking text into the current buffer.

Look for the @command{@kbd{M-x} boxquote-*} commands.

@node browse-kill-ring, clipper, boxquote, Top
@chapter browse-kill-ring.el -  interactively insert items from kill-ring.

Ever feel that @kbd{C-y M-y M-y M-y ...} is not a great way of trying
to find that piece of text you know you killed a while back?  Then
browse-kill-ring.el is for you.

To use, type @command{@kbd{M-x} browse-kill-ring}.  You can bind
@command{browse-kill-ring} to a key, like:

@example
(global-set-key (kbd "C-c k") 'browse-kill-ring)
@end example

Even better than doing that, though, is to set up @kbd{M-y} such that
it invokes @command{browse-kill-ring} if the last command wasn't a
yank.  This great idea is from Michael Slass @email{mikesl@@wrq.com}.
Here is code (from him) to do this:

@example
(defadvice yank-pop (around kill-ring-browse-maybe (arg))
  "If last action was not a yank, run `browse-kill-ring' instead."
  (if (not (eq last-command 'yank))
      (browse-kill-ring)
    ad-do-it))

(ad-activate 'yank-pop)
@end example

(The emacs-goodies-el package could add a customizable variable to
set this up.  Ask if this would be useful. - @email{psg@@debian.org})

Note that the command keeps track of the last window displayed to
handle insertion of chosen text; this might have unexpected
consequences if you do @command{@kbd{M-x} browse-kill-ring}, then
switch your window configuration, and try to use the same @code{*Kill
Ring*} buffer again.

@node clipper, cyclebuffer, browse-kill-ring, Top
@chapter clipper.el - Save strings of data for further use.

Clipper is a way to handle 'clips' of text with some persistance via handles.
A good example is something like the GNU Public License.  If you do a lot of
Free Software work and need to have a copy of the GPL for insertion in your
source files, you can save this text as a 'GPL' clip.  When you call
clipper-insert you will be prompted for a name and when you enter GPL this
will be inserted.

Clipper can also perform search and replacement on token names.  For example
if want the current buffer filename you can use the token
@code{CLIPPER_FILE_NAME_NONDIRECTORY}.

@noindent Available tokens are:

@code{CLIPPER_FILE_NAME_NONDIRECTORY}: The current filename
without its directory.  If this buffer isn't saved to disk then the
buffer name is used.

@code{CLIPPER_FILE_NAME_NONDIRECTORY_SANS_EXTENSION}: The current
filename without its directory and without an extension.

@noindent The following functions allow you to manipulate clipper:

@command{clipper-create} creates a new clip.

@command{clipper-delete} deletes an existing clip.

@command{clipper-insert} inserts a clip into the current buffer.

@command{clipper-edit-clip} edits an existing clip.

@noindent You might also want to setup personal key bindings:

@example
(global-set-key "\C-cci" 'clipper-insert)
(global-set-key "\C-ccc" 'clipper-create)
@end example

@node cyclebuffer, df, clipper, Top
@chapter cyclebuffer - Select buffer by cycling through.

Cyclebuffer is yet another way of selecting buffers.  Instead of
prompting you for a buffer name, cyclebuffer-forward switches to the
most recently used buffer, and repeated invocations of
cyclebuffer-forward switch to less recently visited buffers.  If you
accidentally overshoot, calling cyclebuffer-backward goes back.

I find this to be the fastest buffer-switching mechanism; it's like
@kbd{C-x b <RET>} without the @key{RET}, but it's not limited to the
most recently accessed buffer.  Plus you never have to remember buffer
names; you just keep cycling until you recognize the buffer you're
searching for.

@noindent Suggested keybings:
@example
(global-set-key "M-N" 'cyclebuffer-forward)
(global-set-key "M-P" 'cyclebuffer-backward)
@end example

@node df, diminish, cyclebuffer, Top
@chapter df - display space left on partitions in the mode-line.

This is a quick hack to display disk usage in the mode-line.

If you work with a lot of users sharing the same partition, it
sometimes happens that there is no space left to save your work, which
may drive you to serious brain damage when you lose important work.
This package allows you to have the available disk space and the buffer
size displayed in the mode-line, so you know when you can save your
file or when it's time to do some cleanup.

df is simple to use. Add something like
@example
(df "/home")
@end example
in your .emacs if you want to scan @file{/home}.  Even simpler, enable
it using the customize interface:
@example
  @key{M-x} customize-group @key{RET} df @key{RET}
@end example
where you can toggle on the variable @code{df-run-on-startup}.

@node diminish, dirvars, df, Top
@chapter diminish - Diminish minor-mode's display

Minor modes each put a word on the mode line to signify that they're
active.  This can cause other displays, such as % of file that point is
at, to run off the right side of the screen.  For some minor modes, such
as mouse-avoidance-mode, the display is a waste of space, since users
typically set the mode in their .emacs & never change it.  For other
modes, such as my jiggle-mode, it's a waste because there's already a
visual indication of whether the mode is in effect.

A diminished mode is a minor mode that has had its mode line
display diminished, usually to nothing, although diminishing to a
shorter word or a single letter is also supported.  This package
implements diminished modes.

@noindent To create diminished modes interactively, type
@example
@kbd{M-x} diminish
@end example
@noindent to get a prompt like
@example
  Diminish what minor mode:
@end example
@noindent and respond with the name of some minor mode, like
@code{mouse-avoidance-mode}. You'll then get this prompt:
@example
  To what mode-line display:
@end example
Respond by just hitting @key{<Enter>} if you want the name of the mode
completely removed from the mode line.  If you prefer, you can abbreviate
the name.  If your abbreviation is 2 characters or more, such as "Av",
it'll be displayed as a separate word on the mode line, just like minor
modes' names.  If it's a single character, such as "V", it'll be scrunched
up against the previous word, so for example if the undiminished mode line
display had been "Abbrev Fill Avoid", it would become "Abbrev FillV".
Multiple single-letter diminished modes will all be scrunched together.
The display of undiminished modes will not be affected.

To find out what the mode line would look like if all diminished modes
were still minor, type @command{@key{M-x} diminished-modes}.  This
displays in the echo area the complete list of minor or diminished
modes now active, but displays them all as minor.  They remain
diminished on the mode line.

To convert a diminished mode back to a minor mode, type
@command{@key{M-x} diminish-undo} to get a prompt like
@example
  Restore what diminished mode:
@end example
Respond with the name of some diminished mode.  To convert all
diminished modes back to minor modes, respond to that prompt
with @code{diminished-modes} (unquoted, & note the hyphen).

When you're responding to the prompts for mode names, you can use
completion to avoid extra typing; for example, m o u SPC SPC SPC
is usually enough to specify mouse-avoidance-mode.  Mode names
typically end in "-mode", but for historical reasons
auto-fill-mode is named by "auto-fill-function".

To create diminished modes noninteractively in your .emacs file, put
code like
@example
  (require 'diminish)
  (diminish 'abbrev-mode "Abv")
  (diminish 'jiggle-mode)
  (diminish 'mouse-avoidance-mode "M")
@end example
near the end of your .emacs file.  It should be near the end so that any
minor modes your .emacs loads will already have been loaded by the time
they're to be converted to diminished modes.

Alternatively, you can setup dimished modes using the customize
interface by customizing the variable @code{diminished-minor-modes}.
The same caveat as above applies and the minor mode libraries should
be loaded in ~/.emacs before the @code{(custom-set-variables} line.

@node dirvars, ff-paths, diminish, Top
@chapter dirvars - local variables that apply to an entire directory.

Emacs allows you to specify local variable values for use when
editing a file either in the first line or in a local variables
list.

This file provides similar functionality, but for an entire
directory tree.

You simply place an .emacs-dirvars file in the root of your
project's tree, and you can then set emacs variables like you would
in a Local Variables: section at the end of a file.  E.g. the
contents of a typical dirvars file might look like this:

@example
   ;; -*- emacs-lisp -*-
   ;;
   ;; This file is processed by the dirvars emacs package.  Each variable
   ;; setting below is performed when this dirvars file is loaded.
   ;;
   indent-tabs-mode: nil
   tab-width: 8
   show-trailing-whitespace: t
   indicate-empty-lines: t
@end example

Much of this code is stolen and modified from the standard Emacs
files.el

This code refuses to set any symbol that meets any of these
criteria (this criteria is stolen from files.el):

@itemize @bullet
@item
the symbol is in the ignored-local-variables list

@item
the symbol has the risky-local-variable property.

@item
the symbol name ends in -hook(s), -function(s), -form(s),
    -program, -command, or -predicate.
@end itemize

To use this package, it must be loaded.  You can do this by adding a require
statement to your @file{~/.emacs} file:

@example
  (require 'dirvars)
@end example

@node ff-paths,  , dirvars, Top
@chapter ff-paths - searches certain paths to find files.

This code allows you to use C-x C-f normally most of the time, except that
if the requested file doesn't exist, it is checked against a list of
patterns for special paths to search for a file of the same name.

@noindent Examples:
@itemize @bullet
 @item a file extension of @file{.bib} will cause to search the path
defined in $BSTINPUTS or $BIBINPUTS for the file you requested.
 @item a file extension of @file{.h} will cause the @file{/usr/include/}
and @file{/usr/local/include/} directory trees to be searched.
 @item a file extension of @file{.sty} causes a search of TEXINPUTS and
of all directories below @file{"/usr/share/texmf/tex/}
 @item a file extension of @file{.el} causes a search of the path set in
the emacs variable @code{load-path}.
 @item If the aboves searches don't return a match, the filename is
searched for using the @file{locate} command (if available on your
system).
 @item gzip-compressed files (@file{.gz}) will also be found by ff-paths
if the package jka-compr is present.  If you use some other package,
simply set the @code{ff-paths-gzipped} variable to t:
@end itemize

If one file is found, or many files of the same name are found, then the
*completions* buffer is displayed with all possibilities, including the
non-existing path you first provided.  Selecting it creates the new
file.

This package runs as a find-file-not-found-hooks hook, and so will
happily live alongside other such file-finding mechanisms (e.g.
PC-look-for-include-file PC-try-load-many-files vc-file-not-found-hook)

The patterns to test against filenames and the associated paths to search
for these files can be modified by the user by editing the variable
@code{ff-paths-list}

I suggest that you use ffap.el by Michelangelo Grigni <mic@@cs.ucsd.edu>,
now part of GNU Emacs.  His package will guess the filename from the
text under the editing point.  It will search for an existing file in
various places before you even get the "File: " prompt.  ff-paths will
provide itself to ffap as an additional tool to locate the file before
you ever see a prompt.  ff-paths behaves slightly differently with ffap
than it does with find-file: if the file path selected under point by
ffap does not exist, it is not shown in the completions buffer along
with existing paths.  If only one existing path is found for said file,
it is placed in the minibuffer at the ffap prompt.  Also, since using
the `locate' command is fairly aggressive, it is not used in the ffap
toolkit.

@noindent Installation:

ff-paths installs itself as a hook in find-file-not-found-hooks for
find-file.  If ffap is installed, ff-paths installs itself as a
toolbox hook in ffap-alist.

To use it, customize the variable @code{emacs-goodies-el-use-ff-paths}

@example
@kbd{M-x} customize-variable @key{RET} emacs-goodies-el-use-ff-paths @key{RET}
@end example

To also enable ffap, customize the variable
@code{emacs-goodies-el-use-ffap}

@example
@kbd{M-x} customize-variable @key{RET} emacs-goodies-el-use-ffap @key{RET}
@end example

Both of the above are enabled if you set
@code{emacs-goodies-el-defaults} to t (its aggressive state).

You may alter various settings of @code{ff-paths} using 

@example
@kbd{M-x} customize-group @key{RET} ff-paths @key{RET}
@end example

